datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String
  role             UserRole // TEACHER or STUDENT
  purchasedCourses CoursesPurchased[]
  enrolledCourses  Course[]           @relation("EnrolledCourses")
}

model Teacher {
  id          String   @id @default(cuid())
  fullName    String
  gender      Gender
  joiningDate DateTime
  email       String   @unique
  password    String
  dateOfBirth DateTime
  phone       String
  department  String
  level       Int
  experience  Int
  courses     Course[] @relation("TeacherCourses")
}

model CoursesPurchased {
  id       String @id @default(cuid())
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
}

model Course {
  id               String                 @id @default(cuid())
  title            String
  description      String
  isFree           Boolean                @default(false)
  isActive         Boolean                @default(false)  // approved by admin
  isDraft          Boolean                @default(true)   // not published yet
  accessibility    AccessibilitySettings? @relation("CourseAccessibility")
  objectives       String[]
  parts            Part[]
  modules          Module[]               @relation("CourseModules")
  instructorId     String
  instructor       Teacher                @relation("TeacherCourses", fields: [instructorId], references: [id])
  purchasedCourses CoursesPurchased[]
  groups           Group[]                @relation("GroupCourse")
  enrolledUsers    User[]                 @relation("EnrolledCourses")
  
}

enum Gender {
  MALE
  FEMALE
}

model AccessibilitySettings {
  id                   String            @id @default(cuid())
  courseId             String            @unique
  course               Course            @relation("CourseAccessibility", fields: [courseId], references: [id])
  studentAccessType    StudentAccessType
  academicStage        Int // 1, 2, 3, 4 for stages
  canAccessIfPurchased Boolean           @default(false)
  groups               Group[]           @relation("AccessibilityGroups")
}

model Part {
  id             String   @id @default(cuid())
  title          String
  price          Float
  completionTime Int // Ideal time to complete the part in hours
  openingDate    DateTime
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
  modules        Module[]
}

model Module {
  id          String       @id @default(cuid())
  type        ModuleType // Enum for Chapter, Exam, Assignment, Attachment
  partId      String
  part        Part         @relation(fields: [partId], references: [id])
  courseId    String
  course      Course       @relation("CourseModules", fields: [courseId], references: [id])
  lessons     Lesson[]
  questions   Question[]
  attachments Attachment[]
  assignments Assignment[] @relation("ModuleAssignments")
  exams       Exam[]       @relation("ModuleExams")
}

model Lesson {
  id            String  @id @default(cuid())
  title         String
  videoUrl      String? // Optional, if video is present
  audioUrl      String? // Optional, if audio is present
  moduleId      String
  module        Module  @relation(fields: [moduleId], references: [id])
  isPromotional Boolean @default(false)
}

model Assignment {
  id        String     @id @default(cuid())
  title     String
  questions Question[]
  moduleId  String
  module    Module     @relation("ModuleAssignments", fields: [moduleId], references: [id])
}

model Exam {
  id        String     @id @default(cuid())
  title     String
  questions Question[]
  moduleId  String
  module    Module     @relation("ModuleExams", fields: [moduleId], references: [id])
}

model Question {
  id            String      @id @default(cuid())
  questionText  String
  answerType    AnswerType // Enum for MCQ, trueFalse, shortAnswer
  options       String[] // Make it non-optional
  correctAnswer String
  assignmentId  String?
  examId        String?
  moduleId      String?
  assignment    Assignment? @relation(fields: [assignmentId], references: [id])
  exam          Exam?       @relation(fields: [examId], references: [id])
  module        Module?     @relation(fields: [moduleId], references: [id])
}

model Attachment {
  id          String @id @default(cuid())
  fileType    String
  fileUrl     String
  description String
  moduleId    String
  module      Module @relation(fields: [moduleId], references: [id])
}

model Group {
  id                    String                  @id @default(cuid())
  title                 String
  courses               Course[]                @relation("GroupCourse")
  accessibilitySettings AccessibilitySettings[] @relation("AccessibilityGroups")
}

enum UserRole {
  TEACHER
  STUDENT
}

enum StudentAccessType {
  INTERNAL
  EXTERNAL
}

enum ModuleType {
  CHAPTER
  EXAM
  ASSIGNMENT
  ATTACHMENT
}

enum AnswerType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}
